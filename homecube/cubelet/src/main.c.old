//
//#define APP_NAME        "sniffex"
//#define APP_DESC        "Sniffer example using libpcap"
//#define APP_COPYRIGHT   "Copyright (c) 2005 The Tcpdump Group"
//#define APP_DISCLAIMER  "THERE IS ABSOLUTELY NO WARRANTY FOR THIS PROGRAM."
//
//#include <pcap.h>
//#include <stdio.h>
//#include <string.h>
//#include <stdlib.h>
//#include <ctype.h>
//#include <errno.h>
//#include <sys/types.h>
//#include <sys/socket.h>
//#include <netinet/in.h>
//#include <arpa/inet.h>
//
///* default snap length (maximum bytes per packet to capture) */
//#define SNAP_LEN 1518
//
///* ethernet headers are always exactly 14 bytes [1] */
//#define SIZE_ETHERNET 14
//
///* Ethernet addresses are 6 bytes */
//#define ETHER_ADDR_LEN  6
//
///* Ethernet header */
//struct sniff_ethernet {
//    u_char  ether_dhost[ETHER_ADDR_LEN];    /* destination host address */
//    u_char  ether_shost[ETHER_ADDR_LEN];    /* source host address */
//    u_short ether_type;                     /* IP? ARP? RARP? etc */
//};
//
///* IP header */
//struct sniff_ip {
//    u_char  ip_vhl;                 /* version << 4 | header length >> 2 */
//    u_char  ip_tos;                 /* type of service */
//    u_short ip_len;                 /* total length */
//    u_short ip_id;                  /* identification */
//    u_short ip_off;                 /* fragment offset field */
//#define IP_RF 0x8000            /* reserved fragment flag */
//#define IP_DF 0x4000            /* dont fragment flag */
//#define IP_MF 0x2000            /* more fragments flag */
//#define IP_OFFMASK 0x1fff       /* mask for fragmenting bits */
//    u_char  ip_ttl;                 /* time to live */
//    u_char  ip_p;                   /* protocol */
//    u_short ip_sum;                 /* checksum */
//    struct  in_addr ip_src,ip_dst;  /* source and dest address */
//};
//#define IP_HL(ip)               (((ip)->ip_vhl) & 0x0f)
//#define IP_V(ip)                (((ip)->ip_vhl) >> 4)
//
///* TCP header */
//typedef u_int tcp_seq;
//
//struct sniff_tcp {
//    u_short th_sport;               /* source port */
//    u_short th_dport;               /* destination port */
//    tcp_seq th_seq;                 /* sequence number */
//    tcp_seq th_ack;                 /* acknowledgement number */
//    u_char  th_offx2;               /* data offset, rsvd */
//#define TH_OFF(th)      (((th)->th_offx2 & 0xf0) >> 4)
//    u_char  th_flags;
//#define TH_FIN  0x01
//#define TH_SYN  0x02
//#define TH_RST  0x04
//#define TH_PUSH 0x08
//#define TH_ACK  0x10
//#define TH_URG  0x20
//#define TH_ECE  0x40
//#define TH_CWR  0x80
//#define TH_FLAGS        (TH_FIN|TH_SYN|TH_RST|TH_ACK|TH_URG|TH_ECE|TH_CWR)
//    u_short th_win;                 /* window */
//    u_short th_sum;                 /* checksum */
//    u_short th_urp;                 /* urgent pointer */
//};
//
//void
//got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet);
//
//void
//print_payload(const u_char *payload, int len);
//
//void
//print_hex_ascii_line(const u_char *payload, int len, int offset);
//
//void
//print_app_banner(void);
//
//void
//print_app_usage(void);
//
///*
// * app name/banner
// */
//void
//print_app_banner(void)
//{
//
//    printf("%s - %s\n", APP_NAME, APP_DESC);
//    printf("%s\n", APP_COPYRIGHT);
//    printf("%s\n", APP_DISCLAIMER);
//    printf("\n");
//
//    return;
//}
//
///*
// * print help text
// */
//void
//print_app_usage(void)
//{
//
//    printf("Usage: %s [interface]\n", APP_NAME);
//    printf("\n");
//    printf("Options:\n");
//    printf("    interface    Listen on <interface> for packets.\n");
//    printf("\n");
//
//    return;
//}
//
///*
// * print data in rows of 16 bytes: offset   hex   ascii
// *
// * 00000   47 45 54 20 2f 20 48 54  54 50 2f 31 2e 31 0d 0a   GET / HTTP/1.1..
// */
//void
//print_hex_ascii_line(const u_char *payload, int len, int offset)
//{
//
//    int i;
//    int gap;
//    const u_char *ch;
//
//    /* offset */
//    printf("%05d   ", offset);
//
//    /* hex */
//    ch = payload;
//    for(i = 0; i < len; i++) {
//        printf("%02x ", *ch);
//        ch++;
//        /* print extra space after 8th byte for visual aid */
//        if (i == 7)
//            printf(" ");
//    }
//    /* print space to handle line less than 8 bytes */
//    if (len < 8)
//        printf(" ");
//
//    /* fill hex gap with spaces if not full line */
//    if (len < 16) {
//        gap = 16 - len;
//        for (i = 0; i < gap; i++) {
//            printf("   ");
//        }
//    }
//    printf("   ");
//
//    /* ascii (if printable) */
//    ch = payload;
//    for(i = 0; i < len; i++) {
//        if (isprint(*ch))
//            printf("%c", *ch);
//        else
//            printf(".");
//        ch++;
//    }
//
//    printf("\n");
//
//    return;
//}
//
///*
// * print packet payload data (avoid printing binary data)
// */
//void
//print_payload(const u_char *payload, int len)
//{
//
//    int len_rem = len;
//    int line_width = 16;            /* number of bytes per line */
//    int line_len;
//    int offset = 0;                 /* zero-based offset counter */
//    const u_char *ch = payload;
//
//    if (len <= 0)
//        return;
//
//    /* data fits on one line */
//    if (len <= line_width) {
//        print_hex_ascii_line(ch, len, offset);
//        return;
//    }
//
//    /* data spans multiple lines */
//    for ( ;; ) {
//        /* compute current line length */
//        line_len = line_width % len_rem;
//        /* print line */
//        print_hex_ascii_line(ch, line_len, offset);
//        /* compute total remaining */
//        len_rem = len_rem - line_len;
//        /* shift pointer to remaining bytes to print */
//        ch = ch + line_len;
//        /* add offset */
//        offset = offset + line_width;
//        /* check if we have line width chars or less */
//        if (len_rem <= line_width) {
//            /* print last line and get out */
//            print_hex_ascii_line(ch, len_rem, offset);
//            break;
//        }
//    }
//
//    return;
//}
//
///*
// * dissect/print packet
// */
//void
//got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet)
//{
//
//    static int count = 1;                   /* packet counter */
//
//    /* declare pointers to packet headers */
//    const struct sniff_ethernet *ethernet;  /* The ethernet header [1] */
//    const struct sniff_ip *ip;              /* The IP header */
//    const struct sniff_tcp *tcp;            /* The TCP header */
//    const char *payload;                    /* Packet payload */
//
//    int size_ip;
//    int size_tcp;
//    int size_payload;
//
//    printf("\nPacket number %d:\n", count);
//    count++;
//
//    /* define ethernet header */
//    ethernet = (struct sniff_ethernet*)(packet);
//
//    /* define/compute ip header offset */
//    ip = (struct sniff_ip*)(packet + SIZE_ETHERNET);
//    size_ip = IP_HL(ip)*4;
//    if (size_ip < 20) {
//        printf("   * Invalid IP header length: %u bytes\n", size_ip);
//        return;
//    }
//
//    /* print source and destination IP addresses */
//    printf("       From: %s\n", inet_ntoa(ip->ip_src));
//    printf("         To: %s\n", inet_ntoa(ip->ip_dst));
//
//    /* determine protocol */
//    switch(ip->ip_p) {
//        case IPPROTO_TCP:
//            printf("   Protocol: TCP\n");
//            break;
//        case IPPROTO_UDP:
//            printf("   Protocol: UDP\n");
//            return;
//        case IPPROTO_ICMP:
//            printf("   Protocol: ICMP\n");
//            return;
//        case IPPROTO_IP:
//            printf("   Protocol: IP\n");
//            return;
//        default:
//            printf("   Protocol: unknown\n");
//            return;
//    }
//
//    /*
//     *  OK, this packet is TCP.
//     */
//
//    /* define/compute tcp header offset */
//    tcp = (struct sniff_tcp*)(packet + SIZE_ETHERNET + size_ip);
//    size_tcp = TH_OFF(tcp)*4;
//    if (size_tcp < 20) {
//        printf("   * Invalid TCP header length: %u bytes\n", size_tcp);
//        return;
//    }
//
//    printf("   Src port: %d\n", ntohs(tcp->th_sport));
//    printf("   Dst port: %d\n", ntohs(tcp->th_dport));
//
//    /* define/compute tcp payload (segment) offset */
//    payload = (u_char *)(packet + SIZE_ETHERNET + size_ip + size_tcp);
//
//    /* compute tcp payload (segment) size */
//    size_payload = ntohs(ip->ip_len) - (size_ip + size_tcp);
//
//    /*
//     * Print payload data; it might be binary, so don't just
//     * treat it as a string.
//     */
//    if (size_payload > 0) {
//        printf("   Payload (%d bytes):\n", size_payload);
//        print_payload(payload, size_payload);
//    }
//
//    return;
//}
//
//int main(int argc, char **argv)
//{
//
//    char *dev = "wlan1";           /* capture device name */
//    char errbuf[PCAP_ERRBUF_SIZE];      /* error buffer */
//    pcap_t *handle;             /* packet capture handle */
//
//    char filter_exp[] = "ip";       /* filter expression [3] */
//    struct bpf_program fp;          /* compiled filter program (expression) */
//    bpf_u_int32 mask;           /* subnet mask */
//    bpf_u_int32 net;            /* ip */
//    int num_packets = 10;           /* number of packets to capture */
//
//    print_app_banner();
//
//    /* check for capture device name on command-line */
//    if (argc == 2) {
//        dev = argv[1];
//    }
//    else if (argc > 2) {
//        fprintf(stderr, "error: unrecognized command-line options\n\n");
//        print_app_usage();
//        exit(EXIT_FAILURE);
//    }
//    else {
//        /* find a capture device if not specified on command-line */
//        dev = pcap_lookupdev(errbuf);
//        if (dev == NULL) {
//            fprintf(stderr, "Couldn't find default device: %s\n",
//                    errbuf);
//            exit(EXIT_FAILURE);
//        }
//    }
//
//    dev = "wlan1";
//
//    /* get network number and mask associated with capture device */
//    if (pcap_lookupnet(dev, &net, &mask, errbuf) == -1) {
//        fprintf(stderr, "Couldn't get netmask for device %s: %s\n",
//                dev, errbuf);
//        net = 0;
//        mask = 0;
//    }
//
//    /* print capture info */
//    printf("Device: %s\n", dev);
//    printf("Number of packets: %d\n", num_packets);
//    printf("Filter expression: %s\n", filter_exp);
//
//    /* open capture device */
//    handle = pcap_open_live(dev, SNAP_LEN, 1, 1000, errbuf);
//    if (handle == NULL) {
//        fprintf(stderr, "Couldn't open device %s: %s\n", dev, errbuf);
//        exit(EXIT_FAILURE);
//    }
//
//    /* make sure we're capturing on an Ethernet device [2] */
//    if (pcap_datalink(handle) != DLT_EN10MB) {
//        fprintf(stderr, "%s is not an Ethernet\n", dev);
//        exit(EXIT_FAILURE);
//    }
//
//    /* compile the filter expression */
//    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
//        fprintf(stderr, "Couldn't parse filter %s: %s\n",
//                filter_exp, pcap_geterr(handle));
//        exit(EXIT_FAILURE);
//    }
//
//    /* apply the compiled filter */
//    if (pcap_setfilter(handle, &fp) == -1) {
//        fprintf(stderr, "Couldn't install filter %s: %s\n",
//                filter_exp, pcap_geterr(handle));
//        exit(EXIT_FAILURE);
//    }
//
//    /* now we can set our callback function */
//    pcap_loop(handle, num_packets, got_packet, NULL);
//
//    /* cleanup */
//    pcap_freecode(&fp);
//    pcap_close(handle);
//
//    printf("\nCapture complete!\n");
//
//    return 0;
#include<pcap.h>
#include<stdio.h>
#include<stdlib.h> // for exit()
#include<string.h> //for memset

#include<sys/socket.h>
#include<arpa/inet.h> // for inet_ntoa()
#include<net/ethernet.h>
#include<netinet/ip_icmp.h>	//Provides declarations for icmp header
#include<netinet/udp.h>	//Provides declarations for udp header
#include<netinet/tcp.h>	//Provides declarations for tcp header
#include<netinet/ip.h>	//Provides declarations for ip header
#include<netinet/ether.h>

/* ugly shortcut -- Ethernet packet headers are 14 bytes */
#define ETH_HEADER_SIZE 14
#define AVS_HEADER_SIZE 64                 /* AVS capture header size */
#define DATA_80211_FRAME_SIZE 24           /* header for 802.11 data packet */
#define LLC_HEADER_SIZE 8                  /* LLC frame for encapsulation */

/* SNAP LLC header format */
struct snap_header
{
    u_int8_t dsap;
    u_int8_t ssap;
    u_int8_t ctl;
    u_int16_t org;
    u_int8_t org2;
    u_int16_t ether_type;          /* ethernet type */
} __attribute__ ((__packed__));

/* for the sake of clarity we'll use globals for a few things */
char *device;     /* device to sniff on */
int verbose = 0;    /* verbose output about device */
pcap_t *handle;     /* handle for the opened pcap session */
int wired=0;        /* flag for wired/wireless */

/* gracefully handle a Control C */
void
ctrl_c ( )
{
    printf ("Exiting\n");
    pcap_breakloop (handle);  /* tell pcap_loop or pcap_dispatch to stop capturing */
    pcap_close(handle);
    exit (0);
}

/* usage */
void
usage (char *name)
{
    printf ("%s - simple ARP sniffer\n", name);
    printf ("Usage: %s [-i interface] [-l] [-v]\n", name);
    printf ("    -i    interface to sniff on\n");
    printf ("    -l    list available interfaces\n");
    printf ("    -v    print verbose info\n\n");
    exit (1);
}

/* callback function to process a packet when captured */
void
process_packet_two (u_char * args, const struct pcap_pkthdr *header,
                const u_char * packet)
{
    fprintf(stdout, "In process packet 2!\n");
    struct ether_header *eth_header;  /* in ethernet.h included by if_eth.h */
    struct snap_header *llc_header;   /* RFC 1042 encapsulation header */
    struct ether_arp *arp_packet;     /* from if_eth.h */

    if (wired)     /* global flag - wired or wireless? */
    {
        eth_header = (struct ether_header *) packet;
        arp_packet = (struct ether_arp *) (packet + ETH_HEADER_SIZE);
        if (ntohs (eth_header->ether_type) != ETHERTYPE_ARP) return;
    } else {      /* wireless */
        llc_header = (struct snap_header *)
                (packet + AVS_HEADER_SIZE + DATA_80211_FRAME_SIZE);
        arp_packet = (struct ether_arp *)
                (packet + AVS_HEADER_SIZE + DATA_80211_FRAME_SIZE + LLC_HEADER_SIZE);
        if (ntohs (llc_header->ether_type) != ETHERTYPE_ARP) {
            fprintf(stdout, "Not meant to handle this packet. Packet is %u Returning...\n", llc_header->ether_type);
            //return;
        }

    }

    printf ("Source: %d.%d.%d.%d\t\tDestination: %d.%d.%d.%d\n",
            arp_packet->arp_spa[0],
            arp_packet->arp_spa[1],
            arp_packet->arp_spa[2],
            arp_packet->arp_spa[3],
            arp_packet->arp_tpa[0],
            arp_packet->arp_tpa[1],
            arp_packet->arp_tpa[2],
            arp_packet->arp_tpa[3]);
}
void process_packet(u_char *, const struct pcap_pkthdr *, const u_char *);
void process_ip_packet(const u_char * , int);
void print_ip_packet(const u_char * , int);
void print_tcp_packet(const u_char *  , int );
void print_udp_packet(const u_char * , int);
void print_icmp_packet(const u_char * , int );
void print_ip_header(const u_char *, int);
void PrintData (const u_char * , int);
void pcapHandler(u_char *args, const struct pcap_pkthdr *header, const u_char *packet);

FILE *logfile;
struct sockaddr_in source,dest;
int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j;

/* tcpdump header (ether.h) defines ETHER_HDRLEN) */
#ifndef ETHER_HDRLEN
#define ETHER_HDRLEN 14
#endif


u_int16_t handle_ethernet
        (u_char *args,const struct pcap_pkthdr* pkthdr,const u_char*
        packet);
u_char* handle_IP
        (u_char *args,const struct pcap_pkthdr* pkthdr,const u_char*
        packet);


/*
 * Structure of an internet header, naked of options.
 *
 * Stolen from tcpdump source (thanks tcpdump people)
 *
 * We declare ip_len and ip_off to be short, rather than u_short
 * pragmatically since otherwise unsigned comparisons can result
 * against negative integers quite easily, and fail in subtle ways.
 */
struct my_ip {
    u_int8_t	ip_vhl;		/* header length, version */
#define IP_V(ip)	(((ip)->ip_vhl & 0xf0) >> 4)
#define IP_HL(ip)	((ip)->ip_vhl & 0x0f)
    u_int8_t	ip_tos;		/* type of service */
    u_int16_t	ip_len;		/* total length */
    u_int16_t	ip_id;		/* identification */
    u_int16_t	ip_off;		/* fragment offset field */
#define	IP_DF 0x4000			/* dont fragment flag */
#define	IP_MF 0x2000			/* more fragments flag */
#define	IP_OFFMASK 0x1fff		/* mask for fragmenting bits */
    u_int8_t	ip_ttl;		/* time to live */
    u_int8_t	ip_p;		/* protocol */
    u_int16_t	ip_sum;		/* checksum */
    struct	in_addr ip_src,ip_dst;	/* source and dest address */
};

/* looking at ethernet headers */
void my_callback(u_char *args,const struct pcap_pkthdr* pkthdr,const u_char*
packet)
{
    u_int16_t type = handle_ethernet(args,pkthdr,packet);

    if(type == ETHERTYPE_IP)
    {/* handle IP packet */
        handle_IP(args,pkthdr,packet);
    }else if(type == ETHERTYPE_ARP)
    {/* handle arp packet */
    }
    else if(type == ETHERTYPE_REVARP)
    {/* handle reverse arp packet */
    }
}

u_char* handle_IP
        (u_char *args,const struct pcap_pkthdr* pkthdr,const u_char*
        packet)
{
    const struct my_ip* ip;
    u_int length = pkthdr->len;
    u_int hlen,off,version;
    int i;

    int len;

    /* jump pass the ethernet header */
    ip = (struct my_ip*)(packet + sizeof(struct ether_header));
    length -= sizeof(struct ether_header);

    /* check to see we have a packet of valid length */
    if (length < sizeof(struct my_ip))
    {
        printf("truncated ip %d",length);
        return NULL;
    }

    len     = ntohs(ip->ip_len);
    hlen    = IP_HL(ip); /* header length */
    version = IP_V(ip);/* ip version */

    /* check version */
    if(version != 4)
    {
        fprintf(stdout,"Unknown version %d\n",version);
        return NULL;
    }

    /* check header length */
    if(hlen < 5 )
    {
        fprintf(stdout,"bad-hlen %d \n",hlen);
    }

    /* see if we have as much packet as we should */
    if(length < len)
        printf("\ntruncated IP - %d bytes missing\n",len - length);

    /* Check to see if we have the first fragment */
    off = ntohs(ip->ip_off);
    if((off & 0x1fff) == 0 )/* aka no 1's in first 13 bits */
    {/* print SOURCE DESTINATION hlen version len offset */
        fprintf(stdout,"IP: ");
        fprintf(stdout,"%s ",
                inet_ntoa(ip->ip_src));
        fprintf(stdout,"%s %d %d %d %d\n",
                inet_ntoa(ip->ip_dst),
                hlen,version,len,off);
    }

    return NULL;
}

/* handle ethernet packets, much of this code gleaned from
 * print-ether.c from tcpdump source
 */
u_int16_t handle_ethernet
        (u_char *args,const struct pcap_pkthdr* pkthdr,const u_char*
        packet)
{
    u_int caplen = pkthdr->caplen;
    u_int length = pkthdr->len;
    struct ether_header *eptr;  /* net/ethernet.h */
    u_short ether_type;

    if (caplen < ETHER_HDRLEN)
    {
        fprintf(stdout,"Packet length less than ethernet header length\n");
        return -1;
    }

    /* lets start with the ether header... */
    eptr = (struct ether_header *) packet;
    ether_type = ntohs(eptr->ether_type);

    /* Lets print SOURCE DEST TYPE LENGTH */
    fprintf(stdout,"ETH: ");
    fprintf(stdout,"%s "
            ,ether_ntoa((struct ether_addr*)eptr->ether_shost));
    fprintf(stdout,"%s "
            ,ether_ntoa((struct ether_addr*)eptr->ether_dhost));

    /* check to see if we have an ip packet */
    if (ether_type == ETHERTYPE_IP)
    {
        fprintf(stdout,"(IP)");
    }else  if (ether_type == ETHERTYPE_ARP)
    {
        fprintf(stdout,"(ARP)");
    }else  if (eptr->ether_type == ETHERTYPE_REVARP)
    {
        fprintf(stdout,"(RARP)");
    }else {
        fprintf(stdout,"(?)");
    }
    //fprintf(stdout, "%hu", ether_type);
    fprintf(stdout," %d\n",length);

    return ether_type;
}


int
main (int argc, char *argv[])
{
    char o;     /* for option processing */
    char errbuf[PCAP_ERRBUF_SIZE];  /* pcap error messages buffer */
    struct pcap_pkthdr header;  /* packet header from pcap */
    const u_char *packet;   /* packet */
    bpf_u_int32 netp;   /* ip address of interface */
    bpf_u_int32 maskp;    /* subnet mask of interface */
    char *filter = "arp";   /* filter for BPF (human readable) */
    struct bpf_program fp;  /* compiled BPF filter */
    int r;      /* generic return value */
    pcap_if_t *alldevsp;    /* list of interfaces */

    char *device = "wlan1";
    int verbose = 1;
    pcap_t *handler = pcap_create(device, errbuf);
    /* setup signal handler so Control-C will gracefully exit */
    //signal (SIGINT, ctrl_c, handler);



    /* set errbuf to 0 length string to check for warnings */
    errbuf[0] = 0;

    /* open device for sniffing */


//    if (handler == NULL)   /* there was an error */
//    {
//        fprintf (stderr, "%s", errbuf);
//        exit (1);
//    }
//
//    if (strlen (errbuf) > 0)
//    {
//        fprintf (stderr, "Warning: %s", errbuf);  /* a warning was generated */
//        errbuf[0] = 0;    /* re-set error buffer */
//    }
//
//    if (pcap_can_set_rfmon(handler)==0){
//            fprintf(stderr, "Monitor mode could not be set on %s\n", device);
//    }else{
//        fprintf(stdout, "Monitor mode set on device %s\n", device);
//    }
//
//    if (pcap_set_rfmon(handler, 1)==0){
//        printf("Monitor mode on %s has been enabled\n", device);
//    }
//
//    if (verbose)
//    {
//        printf ("Using device: %s\n", device);
//        /* printf ("Using libpcap version %s", pcap_lib_version); */
//    }

    pcap_set_promisc(handler, 0);
    pcap_set_snaplen(handler, 2048);
    pcap_set_timeout(handler, 512);
    int status = pcap_activate(handler);

    printf("Status is : %d\n", status);
    pcap_perror(handler, "Error:");

    /* find out the datalink type of the connection */
//    if (pcap_datalink (handler) == DLT_EN10MB)
//    {
//        wired = 1;     /* ethernet link */
//    } else {
//        if (pcap_datalink (handler) == DLT_IEEE802_11_RADIO_AVS)
//        {
//            wired = 0;  /* wireless */
//        } else {
//            fprintf (stderr, "I don't support this interface type!\n");
//            exit (1);
//        }
//    }

    fprintf(stdout, "%d\n", pcap_datalink(handler));

//    /* get the IP subnet mask of the device, so we set a filter on it */
//    if (pcap_lookupnet (device, &netp, &maskp, errbuf) == -1)
//    {
//        fprintf (stderr, "%s", errbuf);
//        exit (1);
//    }
//
//
//
//    /* compile the filter, so we can capture only stuff we are interested in */
//    if (pcap_compile (handler, &fp, filter, 0, maskp) == -1)
//    {
//        fprintf (stderr, "%s", pcap_geterr (handler));
//        exit (1);
//    }

//    /* set the filter for the device we have opened */
//    if (pcap_setfilter (handler, &fp) == -1)
//    {
//        fprintf (stderr, "%s", pcap_geterr (handler));
//        exit (1);
//    }

    /* we'll be nice and free the memory used for the compiled filter */
//    pcap_freecode (&fp);

    printf("Entering loop...\n");

    logfile=fopen("log.txt","w");

    if ((r = pcap_loop (handler, -1, pcapHandler, NULL)) < 0)
    {
        if (r == -1)    /* pcap error */
        {
            fprintf (stderr, "%s", pcap_geterr (handler));
            exit (1);
        }
        /* otherwise return should be -2, meaning pcap_breakloop has been called */
    }

    /* close our devices */
    pcap_close (handler);
}
void process_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *buffer)
{
    int size = header->len;

    //Get the IP Header part of this packet , excluding the ethernet header
    struct iphdr *iph = (struct iphdr*)(buffer + sizeof(struct ethhdr));
    ++total;
    //printf("Protocol is : %d\n", iph->protocol);
    switch (iph->protocol) //Check the Protocol and do accordingly...
    {//do similar in 80211 
        case 1:  //ICMP Protocol
            ++icmp;
            print_ip_header(buffer, size);
            print_icmp_packet( buffer , size);
            break;

        case 2:  //IGMP Protocol
            ++igmp;
            break;

        case 6:  //TCP Protocol
            ++tcp;
            fprintf(stdout, "Got a TCP Packet\n");
            print_ip_header(buffer, size);
            //print_tcp_packet(buffer , size);
            break;

        case 17: //UDP Protocol
            ++udp;
            fprintf(stdout, "Got a UDP Packet\n");
            print_ip_header(buffer, size);
            print_udp_packet(buffer , size);
            break;

        default: //Some Other Protocol like ARP etc.
            ++others;
            print_ip_header(buffer, size);
            break;
    }
    fprintf(stdout, "TCP : %d   UDP : %d   ICMP : %d   IGMP : %d   Others : %d   Total : %d\r", tcp , udp , icmp , igmp , others , total);
}

void print_ethernet_header(const u_char *Buffer, int Size)
{
    struct ethhdr *eth = (struct ethhdr *)Buffer;

    fprintf(logfile , "\n");
    fprintf(logfile , "Ethernet Header\n");
    fprintf(logfile , "   |-Destination Address : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_dest[0] , eth->h_dest[1] , eth->h_dest[2] , eth->h_dest[3] , eth->h_dest[4] , eth->h_dest[5] );
    fprintf(logfile , "   |-Source Address      : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_source[0] , eth->h_source[1] , eth->h_source[2] , eth->h_source[3] , eth->h_source[4] , eth->h_source[5] );
    fprintf(logfile , "   |-Protocol            : %u \n",(unsigned short)eth->h_proto);
    fprintf(logfile, "***END ETHERNET HEADER***");
}

void print_ip_header(const u_char * Buffer, int Size)
{
    print_ethernet_header(Buffer , Size);

    unsigned short iphdrlen;

    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr) );
    iphdrlen =iph->ihl*4;

    memset(&source, 0, sizeof(source));
    source.sin_addr.s_addr = iph->saddr;

    memset(&dest, 0, sizeof(dest));
    dest.sin_addr.s_addr = iph->daddr;

    fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
//    fprintf(logfile , "   |-IP Version        : %d\n",(unsigned int)iph->version);
//    fprintf(logfile , "   |-IP Header Length  : %d DWORDS or %d Bytes\n",(unsigned int)iph->ihl,((unsigned int)(iph->ihl))*4);
//    fprintf(logfile , "   |-Type Of Service   : %d\n",(unsigned int)iph->tos);
//    fprintf(logfile , "   |-IP Total Length   : %d  Bytes(Size of Packet)\n",ntohs(iph->tot_len));
    fprintf(logfile , "   |-Identification    : %d\n",ntohs(iph->id));
//    //fprintf(logfile , "   |-Reserved ZERO Field   : %d\n",(unsigned int)iphdr->ip_reserved_zero);
//    //fprintf(logfile , "   |-Dont Fragment Field   : %d\n",(unsigned int)iphdr->ip_dont_fragment);
//    //fprintf(logfile , "   |-More Fragment Field   : %d\n",(unsigned int)iphdr->ip_more_fragment);
//    fprintf(logfile , "   |-TTL      : %d\n",(unsigned int)iph->ttl);
//    fprintf(logfile , "   |-Protocol : %d\n",(unsigned int)iph->protocol);
//    fprintf(logfile , "   |-Checksum : %d\n",ntohs(iph->check));
    fprintf(logfile , "   |-Source IP        : %s\n" , inet_ntoa(source.sin_addr) );
    fprintf(logfile , "   |-Destination IP   : %s\n" , inet_ntoa(dest.sin_addr) );
    //fprintf(stdout, "Got packet going from %s to %s\n", inet_ntoa(source.sin_addr), inet_ntoa(dest.sin_addr));
}

void print_tcp_packet(const u_char * Buffer, int Size)
{

    unsigned short iphdrlen;

    struct iphdr *iph = (struct iphdr *)( Buffer  + sizeof(struct ethhdr) );
    iphdrlen = iph->ihl*4;

    struct tcphdr *tcph=(struct tcphdr*)(Buffer + iphdrlen + sizeof(struct ethhdr));

    int header_size =  sizeof(struct ethhdr) + iphdrlen + tcph->doff*4;


    fprintf(logfile , "\n\n***********************TCP Packet*************************\n");


    print_ip_header(Buffer,Size);

//    fprintf(logfile , "\n");
//    fprintf(logfile , "TCP Header\n");
//    fprintf(logfile , "   |-Source Port      : %u\n",ntohs(tcph->source));
//    fprintf(logfile , "   |-Destination Port : %u\n",ntohs(tcph->dest));
//    fprintf(logfile , "   |-Sequence Number    : %u\n",ntohl(tcph->seq));
//    fprintf(logfile , "   |-Acknowledge Number : %u\n",ntohl(tcph->ack_seq));
//    fprintf(logfile , "   |-Header Length      : %d DWORDS or %d BYTES\n" ,(unsigned int)tcph->doff,(unsigned int)tcph->doff*4);
//    //fprintf(logfile , "   |-CWR Flag : %d\n",(unsigned int)tcph->cwr);
//    //fprintf(logfile , "   |-ECN Flag : %d\n",(unsigned int)tcph->ece);
//    fprintf(logfile , "   |-Urgent Flag          : %d\n",(unsigned int)tcph->urg);
//    fprintf(logfile , "   |-Acknowledgement Flag : %d\n",(unsigned int)tcph->ack);
//    fprintf(logfile , "   |-Push Flag            : %d\n",(unsigned int)tcph->psh);
//    fprintf(logfile , "   |-Reset Flag           : %d\n",(unsigned int)tcph->rst);
//    fprintf(logfile , "   |-Synchronise Flag     : %d\n",(unsigned int)tcph->syn);
//    fprintf(logfile , "   |-Finish Flag          : %d\n",(unsigned int)tcph->fin);
//    fprintf(logfile , "   |-Window         : %d\n",ntohs(tcph->window));
//    fprintf(logfile , "   |-Checksum       : %d\n",ntohs(tcph->check));
//    fprintf(logfile , "   |-Urgent Pointer : %d\n",tcph->urg_ptr);
//    fprintf(logfile , "\n");
//    fprintf(logfile , "                        DATA Dump                         ");
//    fprintf(logfile , "\n");
//
//    fprintf(logfile , "IP Header\n");
//    PrintData(Buffer,iphdrlen);
//
//    fprintf(logfile , "TCP Header\n");
//    PrintData(Buffer+iphdrlen,tcph->doff*4);
//
//    fprintf(logfile , "Data Payload\n");
//    PrintData(Buffer + header_size , Size - header_size );

    fprintf(logfile , "\n###########################################################");
}

void print_udp_packet(const u_char *Buffer , int Size)
{

    unsigned short iphdrlen;

    struct iphdr *iph = (struct iphdr *)(Buffer +  sizeof(struct ethhdr));
    iphdrlen = iph->ihl*4;

    struct udphdr *udph = (struct udphdr*)(Buffer + iphdrlen  + sizeof(struct ethhdr));

    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof udph;

    fprintf(logfile , "\n\n***********************UDP Packet*************************\n");

    print_ip_header(Buffer,Size);

    fprintf(logfile , "\nUDP Header\n");
    fprintf(logfile , "   |-Source Port      : %d\n" , ntohs(udph->source));
    fprintf(logfile , "   |-Destination Port : %d\n" , ntohs(udph->dest));
    fprintf(logfile , "   |-UDP Length       : %d\n" , ntohs(udph->len));
    fprintf(logfile , "   |-UDP Checksum     : %d\n" , ntohs(udph->check));

    fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer , iphdrlen);

    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer+iphdrlen , sizeof udph);

    fprintf(logfile , "Data Payload\n");

    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , Size - header_size);

    fprintf(logfile , "\n###########################################################");
}

void print_icmp_packet(const u_char * Buffer , int Size)
{
    unsigned short iphdrlen;

    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr));
    iphdrlen = iph->ihl * 4;

    struct icmphdr *icmph = (struct icmphdr *)(Buffer + iphdrlen  + sizeof(struct ethhdr));

    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof icmph;

    fprintf(logfile , "\n\n***********************ICMP Packet*************************\n");

    print_ip_header(Buffer , Size);

    fprintf(logfile , "\n");

    fprintf(logfile , "ICMP Header\n");
    fprintf(logfile , "   |-Type : %d",(unsigned int)(icmph->type));

    if((unsigned int)(icmph->type) == 11)
    {
        fprintf(logfile , "  (TTL Expired)\n");
    }
    else if((unsigned int)(icmph->type) == ICMP_ECHOREPLY)
    {
        fprintf(logfile , "  (ICMP Echo Reply)\n");
    }

    fprintf(logfile , "   |-Code : %d\n",(unsigned int)(icmph->code));
    fprintf(logfile , "   |-Checksum : %d\n",ntohs(icmph->checksum));
    //fprintf(logfile , "   |-ID       : %d\n",ntohs(icmph->id));
    //fprintf(logfile , "   |-Sequence : %d\n",ntohs(icmph->sequence));
    fprintf(logfile , "\n");

    fprintf(logfile , "IP Header\n");
    PrintData(Buffer,iphdrlen);

    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer + iphdrlen , sizeof icmph);

    fprintf(logfile , "Data Payload\n");

    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , (Size - header_size) );

    fprintf(logfile , "\n###########################################################");
}

void PrintData (const u_char * data , int Size)
{
    int i , j;
    for(i=0 ; i < Size ; i++)
    {
        if( i!=0 && i%16==0)   //if one line of hex printing is complete...
        {
            fprintf(logfile , "         ");
            for(j=i-16 ; j<i ; j++)
            {
                if(data[j]>=32 && data[j]<=128)
                    fprintf(logfile , "%c",(unsigned char)data[j]); //if its a number or alphabet

                else fprintf(logfile , "."); //otherwise print a dot
            }
            fprintf(logfile , "\n");
        }

        if(i%16==0) fprintf(logfile , "   ");
        fprintf(logfile , " %02X",(unsigned int)data[i]);

        if( i==Size-1)  //print the last spaces
        {
            for(j=0;j<15-i%16;j++)
            {
                fprintf(logfile , "   "); //extra spaces
            }

            fprintf(logfile , "         ");

            for(j=i-i%16 ; j<=i ; j++)
            {
                if(data[j]>=32 && data[j]<=128)
                {
                    fprintf(logfile , "%c",(unsigned char)data[j]);
                }
                else
                {
                    fprintf(logfile , ".");
                }
            }

            fprintf(logfile ,  "\n" );
        }
    }
}

void pcapHandler(u_char *args, const struct pcap_pkthdr *header, const u_char *packet){
    // This struct is the RadioTap header: https://radiotap.org
    struct ieee80211_radiotap_header{ // RadioTap is the standard for 802.11 reception/transmission/injection
        u_int8_t it_version;
        u_int8_t it_pad;
        uint16_t it_len;
        u_int32_t it_present;
    }__attribute__((__packed__));
    // These are placeholders for offset values:
    const u_char *bssid; // a place to put our BSSID \ these are bytes
    const u_char *essid; // a place to put our ESSID / from the packet
    const u_char *essidLen;
    const u_char *channel; // the frequency (in Mhz) of the AP Radio
    const u_char *rssi; // received signal strength

    int offset = 0;
    struct ieee80211_radiotap_header *rtaphdr;
    rtaphdr = (struct radiotap_header *) packet;
    offset = rtaphdr->it_len; // 26 bytes on my machine
    //if(packet[offset]==0x80){ // 0x80 is 128 in dec. It is a Beacon MGMT frame // REMOVED for BPF syntax
    bssid = packet + 42; // store the BSSID/AP MAC addr, 36 byte offset is transmitter address
    essid = packet + 64; // store the ESSID/Router name too
    essidLen = packet + 63; // store the ESSID length // this can be used to avoid looping bytes until >0x1 as below
    rssi = packet + 22; // this is hex and this value is subtracted from 256 to get -X dbm.
    signed int rssiDbm = rssi[0] - 256;
    channel = packet + 18; // channel in little endian format (2 bytes)
    int channelFreq = channel[1] * 256 + channel[0]; // a little bit of math, remember little endian
    // 87 byte offset contains the "channel number" as per 802.11, e.g. 2412 = "channel 11"
    char *ssid = malloc(63); // 63 byte limit
    unsigned int i = 0; // used in loop below:
    while(essid[i] > 0x1){ // uncomment these to see each byte individually:
        //printf ("hex byte: %x\n",essid[i]); // view byte
        //printf ("hex char: %c\n",essid[i]); // view ASCII
        ssid[i] = essid[i]; // store the ESSID bytes in *ssid
        i++; // POSTFIX
    }
    ssid[i] = '\0'; // terminate the string
    fprintf(stdout,"RSSI: %d dBm\n",rssiDbm);
    fprintf(stdout,"AP Frequency: %iMhz\n",channelFreq);
    fprintf(stdout,"ESSID length: %i bytes.\n",essidLen[0]);
    fprintf(stdout,"ESSID string: %s\n", ssid); // print the stored ESSID bytes
    fprintf(stdout,"BSSID string: %02X:%02X:%02X:%02X:%02X:%02X\n",bssid[0],bssid[1],bssid[2],bssid[3],bssid[4],bssid[5]);
    //} // REMOVED for BPF syntax

    return;
}